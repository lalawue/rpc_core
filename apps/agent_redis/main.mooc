--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import AppBase from "middle.app_base"
Log = require("middle.logger")("[AgentRedis]", "info")

class AgentRedis : AppBase {

    fn init(app_name) {
        self._app_name = app_name
        protocol = AppEnv.Service.LUA_RESP
        Log:info("init %s, try to connect '%s:%d'", app_name, protocol.ipv4, protocol.port)
    }

    fn loadBusiness(rpc_core) {
        -- as client, do nothing here
    }

    fn startBusiness(rpc_core) {
        newRequest = rpc_core.newRequest
        protocol = AppEnv.Service.LUA_RESP
        opt = {
            timeout = AppEnv.Config.RPC_TIMEOUT,
            keep_alive = true
        }

        ret = nil
        datas = nil

        -- keep socket alive, reuse it with multiple redis command
        for i = 1, 5, 1 {
            data_tbl = {"HMSET", "myhash", "hello", '"world"', "count", tostring(i)}
            ret, datas, opt.reuse_info = newRequest(protocol, opt, data_tbl)
            if ret and datas {
                Log:info("server response '%s'", datas)
            } else {
                table.dump(datas)
            }
            opt.keep_alive = (i + 1 < 5) -- close socket for last one
        }

        os.exit(0)
    }
}

return AgentRedis
