--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import ffi from "ffi"
import AppBase from "middle.app_base"
import FileManager from "middle.file_manager"
import Bitcask from "middle.ffi_bitcask"
Log = require("middle.logger")("[ObjDB]", "info")
export AppEnv

-- object storage using redis resp_v2's 'SET/GET/DEL/KEYS', and 'SYNC' for sync linked objdb
--
class ObjDB : AppBase {

    fn init(app_name) {
        -- create dir
        self._dir = AppEnv.Config.DATA_DIR .. "/objdb_data"
        FileManager.mkdir(self._dir)
    }

    -- ./bitraft/bitraft --bind '127.0.0.1:6379' --consistency low -d $PWD/data_master
    fn loadBusiness(rpc_core) {
        -- open database
        self:loadObjDB()
        -- start service
        rpc_core.newService(AppEnv.Service.OBJDB_RESP, { a, b, c in
            return Self.processRequest(self, a, b, c)
        })
    }

    fn startBusiness(rpc_core) {
    }

    -- internal interface
    --

    -- main obj database
    fn loadObjDB() {
        config = {
            dir = self._dir,
            file_size = 128 * 1024 * 1024 -- 128MB
        }
        db = Bitcask.opendb(config)
        if db {
            self._db = db
        } else {
            self._db = nil
            Log:error("failed to open bitcast in %s", self._dir)
            os.exit(0)
        }
    }

    fn processRequest(proto_info, reqeust_object, rpc_response) {
        ret_tbl = nil
        req_tbl = reqeust_object
        if type(req_tbl) == "table" and #req_tbl >= 2 and type(req_tbl[1]) == "string" and type(req_tbl[2]) == "string" {
            cmd = reqeust_object[1]:upper()
            switch cmd {
            case "SET":
                if #req_tbl >= 3 {
                    self._db:set(req_tbl[2], req_tbl[3])
                    ret_tbl = {"OK"}
                } else {
                    ret_tbl = {"-invalid param count"}
                }
            case "GET":
                data = self._db:get(req_tbl[2])
                if type(data) == "string" {
                    ret_tbl = {data}
                } else {
                    ret_tbl = {nil}
                }
            case "DEL":
                ret = self._db:remove(req_tbl[2])
                if ret {
                    ret_tbl = {1}
                } else {
                    ret_tbl = {0}
                }
            case "GC":
                self._db:gc("0") -- default db
                ret_tbl = {1}
            case "KEYS":
                tbl = {}
                param = req_tbl[2] == "*" and ".+" or req_tbl[2]
                for _, key in ipairs(self._db:allKeys()) {
                    if key:find(param) {
                        tbl[#tbl + 1] = key
                    }
                }
                ret_tbl = {tbl}
            }
        }
        if ret_tbl {
            rpc_response:sendResponse(ret_tbl)
            return true
        } else {
            return false
        }
    }
}

return ObjDB
