--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import FileSystem from "lfs"
import Zlib from "base.ffi_zlib"

type = type
ioOpen = io.open
osRemove = os.remove
osRename = os.rename
tableConcat = table.concat
tableSort = table.sort
mathMin = math.min

_dummy_tbl = {}

struct FileManager {

    static fn stat(path) {
        return FileSystem.attributes(path)
    }

    static fn mkdir(dir_path) {
        FileSystem.mkdir(dir_path)
    }

    -- travel dir files, tbl_modes should be { "file" = true, "directory" = true }
    -- return dirs / files in recursive table, and dir name in table.dir_name
    static fn travelDir(dir_path, tbl_modes) {
        if type(dir_path) ~= "string" or type(tbl_modes) ~= "table" {
            return Self._dummy_tbl
        }
        attr = FileSystem.attributes(dir_path)
        if type(attr) ~= "table" or attr.mode ~= "directory" {
            return Self._dummy_tbl
        }
        tbl = {}
        do {
            s, e = dir_path:reverse():find("/", 1, true)
            if s {
                tbl.dir_name = dir_path:sub(dir_path:len() - s + 2)
            }
        }
        for fname in FileSystem.dir(dir_path) {
            attr = FileSystem.attributes(dir_path .. "/" .. fname)
            if attr and tbl_modes[attr.mode] and fname:sub(1,1) ~= '.' {
                if attr.mode == "directory"  {
                    dir = Self.travelDir(dir_path .. "/" .. fname, tbl_modes)
                    tbl[#tbl + 1] = dir
                } else {
                    tbl[#tbl + 1] = fname
                }
            }
        }
        tableSort(tbl, Self._compNames)
        return tbl
    }

    -- save data to path
    static fn saveFile(file_path, data) {
        f = ioOpen(file_path, "wb")
        if f {
            f:write(data)
            f:close()
            return true
        }
        return false
    }

    static fn readFile(file_path) {
        f = ioOpen(file_path, "rb")
        if f {
            data = f:read("*a")
            f:close()
            return data
        }
        return nil
    }

    static fn appendFile(file_path, data) {
        f = ioOpen(file_path, "a+")
        if f {
            f:write(data)
            f:close()
            return true
        }
        return false
    }

    static fn removeFile(file_path) {
        osRemove(file_path)
    }

    static fn renameFile(oldname, newname) {
        osRename(oldname, newname)
    }

    static fn inflate(input_content) {
        if type(input_content) ~= "string" {
            return nil
        }
        _input = { buf_size in
            min_len = mathMin(buf_size, input_content:len())
            if min_len > 0 {
                data = input_content:sub(1, min_len)
                input_content = input_content:sub(1 + min_len)
                return data
            }
        }
        tbl = {}
        _ouput = { data in
            tbl[#tbl + 1] = data
        }
        success, err_msg = Zlib.inflateGzip(_input, _ouput)
        if not success {
            return tableConcat(tbl), err_msg
        }
        return tableConcat(tbl)
    }

    static fn deflate(input_content) {
        if type(input_content) ~= "string" {
            return nil
        }
        _input = { buf_size in
            min_len = mathMin(buf_size, input_content:len())
            if min_len > 0 {
                data = input_content:sub(1, min_len)
                input_content = input_content:sub(1 + min_len)
                return data
            }
        }
        tbl = {}
        _ouput = { data in
            tbl[#tbl + 1] = data
        }
        success, err_msg = Zlib.deflateGzip(_input, _ouput)
        if not success {
            return tableConcat(tbl), err_msg
        }
        return tableConcat(tbl)
    }
}

return FileManager
