--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import TcpRaw from "middle.tcp_stream.tcp_raw"
import TcpSSL from "middle.tcp_stream.tcp_ssl"
import UrlCore from "middle.url"
import HttpParser from "middle.ffi_hyperparser"
import RpcFramework from "middle.rpc_framework"
import FileManager from "middle.file_manager"
Log = require("middle.logger")("[Browser]", "info")

-- act like curl, accept encoding gzip
fn _buildHttpRequest(method, url_info, option, data) {
    if type(method) ~= "string" {
        Log:error("method should be 'GET' or 'POST'")
        return nil
    }

    sub_path = "/"
    if url_info.path and url_info.path:len() > 0 {
        sub_path = url_info.path
    }
    if type(url_info.query) == "table" {
        query = UrlCore.buildQuery(url_info.query)
        if query and query:len() > 0 {
            sub_path = sub_path .. "?" .. query
        }
    }

    tbl = {}
    tbl[#tbl + 1] = string.format("%s %s HTTP/1.1", method, sub_path)
    if url_info.host {
        tbl[#tbl + 1] = "Host: " .. url_info.host
    }
    tbl[#tbl + 1] = "User-Agent: mrpc/v20200804"
    if option and option.inflate {
        tbl[#tbl + 1] = "Accept-Encoding: gzip"
    }
    if option and type(option.header) == "table" {
        for k, v in pairs(option.header) {
            tbl[#tbl + 1] = k .. ": " .. v
        }
    }
    if data {
        tbl[#tbl + 1] = "Content-Length: " .. data:len()
    }
    tbl[#tbl + 1] = "\r\n"
    if data {
        tbl[#tbl + 1] = data
    }
    return table.concat(tbl, "\r\n")
}

fn _processRecvData(brw, data) {
    ret, state, http_tbl = brw._hp:process(data)
    if ret < 0 {
        return ret
    }
    return ret, state, http_tbl
}

-- wait input data collected done, return empty when gzip and not finish
fn _constructContent(http_tbl, option, is_finish) {
    if http_tbl.contents == nil {
        return ""
    }
    output_content = ""
    encoding_desc = http_tbl.header["Content-Encoding"]
    is_gzip = encoding_desc == "gzip"
    if is_gzip and is_finish {
        output_content = FileManager.inflate(table.concat(http_tbl.contents))
    } elseif not is_gzip {
        output_content = table.concat(http_tbl.contents)
    }
    if output_content:len() > 0 {
        http_tbl.contents = nil
    }
    return output_content
}

struct Browser {

    _chann = false -- one tcp chann
    _hp = false -- hyperparser
    _url_info = false -- path, host, port

    -- create browser in coroutine
    fn init() {
        if coroutine.running() == nil {
            Log:error("browser should create from coroutine")
            return false
        }
    }

    --[[
        request HTTP/HTTPS URL
        option as {
            inflate : false, -- default
            header : header, -- table
            recv_cb : fn(header_tbl, data_string) {}, -- for receiving data
        }
        return header_tbl, data_string (if no recv_cb function set)
    ]]
    fn requestURL(site_url, option) {
        if type(site_url) ~= "string" and not coroutine.running() {
            Log:error("please requestURL from coroutine")
            return false
        }

        if self._chann {
            Log:error("stream was opened, close it before open again")
            return false
        }

        url_info = UrlCore.parse(site_url)
        if not url_info {
            Log:error("fail to parse url '%s'", site_url)
            return false
        }

        if type(url_info.scheme) ~= "string" {
            Log:error("scheme was empty, invalid url")
            return false
        }

        if url_info.scheme ~= "http" and url_info.scheme ~= "https" {
            Log:error("invalid scheme")
            return false
        } elseif url_info.scheme == "https" and not TcpSSL {
            Log:error("SSL module not ready, can not support 'HTTPS'")
            return false
        }

        if type(url_info.host) ~= "string" {
            Log:error("invalid host")
            return false
        }

        self._url_info = url_info
        Log:info("-- requestURL %s", site_url)

        ipv4 = nil
        port = nil
        ipv4_pattern = "%d-%.%d-%.%d-%.%d+"
        if url_info.host:find(ipv4_pattern) {
            ipv4 = url_info.host:match("(" .. ipv4_pattern .. ")")
            port = url_info.port
        } else {
            timeout_second = option and option.timeout or AppEnv.Config.RPC_TIMEOUT
            path_args = { domain : url_info.host } -- use HTTP path query string, whatever key

            success, datas = RpcFramework.newRequest(AppEnv.Service.DNS_JSON, { timeout : timeout_second }, path_args)
            if not success or table.isempty(datas) {
                Log:error("failed to dns '%s'", url_info.host)
                return false
            }
            datas = #datas > 0 and datas[1] or datas
            ipv4 = datas["ipv4"]
            port = url_info.port
        }

        if url_info.scheme == "http" {
            self._chann = TcpRaw()
            port = port and tonumber(port) or 80
        } else {
            self._chann = TcpSSL()
            port = port and tonumber(port) or 443
        }
        url_info = false -- reset
        Log:info("get '%s' ipv4 '%s' with port '%d'", self._url_info.host, ipv4, port)

        brw = self
        co = coroutine.running()
        data_tbl = {}
        recv_cb = option and option.recv_cb or { header_tbl, data_string in
            if data_string {
                data_tbl[#data_tbl + 1] = data_string
            }
        }
        callback = { chann, event_name, _, _ in
            if event_name == "event_connected" {
                brw._hp = brw._hp or HttpParser("RESPONSE")
                Log:info("site connected: %p", chann)
                data = _buildHttpRequest("GET", brw._url_info, option)
                chann:send(data)
                Log:info("send http request: %p", chann)
            } elseif event_name == "event_recv" {
                ret, state, http_tbl = _processRecvData(brw, chann:recv())
                if ret < 0 {
                    Log:info("fail to process recv data")
                    brw:closeURL()
                    brw = nil
                    recv_cb(nil, nil)
                    coroutine.resume(co, false)
                } elseif state == HttpParser.STATE_BODY_CONTINUE and http_tbl {
                    content = _constructContent(http_tbl, option, false)
                    if content:len() > 0 {
                        recv_cb(http_tbl, content)
                    }
                } elseif state == HttpParser.STATE_BODY_FINISH and http_tbl {
                    -- FIXME: consider status code 3XX
                    -- FIXME: support cookies
                    -- FIXME: support keep-alive
                    brw:closeURL()
                    brw = nil
                    content = _constructContent(http_tbl, option, true)
                    recv_cb(http_tbl, content)
                    recv_cb(http_tbl, nil)
                    coroutine.resume(co, true, http_tbl, table.concat(data_tbl))
                }
            } elseif event_name == "event_disconnect" or event_name == "event_timer" {
                brw:closeURL()
                brw = nil
                recv_cb(nil, nil)
                coroutine.resume(co, false)
            }
        }
        self._chann:setCallback(callback)
        self._chann:connectAddr(ipv4, port)
        if option and option.timeout {
            self._chann:setEventTimer(option.timeout)
        }
        RpcFramework.setLoopEvent(tostring(self), { _ in return self:onLoopEvent() }, nil)
        Log:info("try connect %s:%d", ipv4, port)
        return coroutine.yield()
    }

    -- return true/false, http header, data, one at a time
    fn postURL(site_url, data) {
        if type(site_url) ~= "string" or not coroutine.running() {
            Log:error("please postURL from coroutine")
            return false
        }
        return false
    }

    fn closeURL() {
        Log:info("-- close URL: %s", self._url_info and self._url_info.host or "empty URL !")
        if self._chann {
            self._chann:setEventTimer(0)
            self._chann:closeChann()
            self._chann = false
        }
        self._hp:reset()
        self._url_info = false
    }

    fn onLoopEvent() {
        if self._chann.onLoopEvent {
            return self._chann:onLoopEvent()
        }
        return true
    }
}

return Browser
