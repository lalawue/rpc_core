--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import Bit from "bit"
local Log = require("middle.logger")("[RAW]", "error")

local _proto_info = {}

struct Parser {
    _info = false
    _data = ""
    _len = false

    static fn newRequest(rpc_info) {
        parser = Self()
        parser._info = rpc_info
        return parser
    }

    static  fn newResponse(rpc_info) {
        parser = Self()
        parser._info = rpc_info
        return parser
    }

    -- return ret_value, proto_info, data_table
    -- the proto_info would be empty_table
    fn process(data) {
        if type(data) ~= "string" {
            Log:error("Invalid process data")
            return -1
        }
        self._data = self._data .. data
        if self._data:len() < 2 {
            return 0
        }
        if not self._len {
            h8 = self._data:byte(1)
            l8 = self._data:byte(2)
            self._len = Bit.lshift(h8, 8) + Bit.band(l8, 0xff)
            self._data = self._data:sub(3)
        }

        if self._data:len() < self._len {
            return 0
        }

        content = self._data
        if content:len() > self._len {
            content = self._data:sub(1, self._len)
        }
        return 1, _proto_info, content
    }

    fn destroy() {
        self._data = ""
        self._len = false
    }
}

return Parser
