--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

--
-- raw tcp stated stream, interface should be same as tcp_ssl
--

import NetCore from "base.ffi_mnet"
Log = require("middle.logger")("[TcpRaw]", "error")

_has_init = false

struct ChannRaw {
    _options = false
    _chann = false
    _callback = false

    fn init(options) {
        if not _has_init {
            NetCore.init()
        }
        self._options = options
        self._chann = NetCore.openChann("tcp")
    }

    fn closeChann() {
        if self._chann {
            self._chann:close()
            self._chann = false
        }
    }

    fn connectAddr(ipv4, port) {
        if self._chann and self._chann:state() ~= "state_connected" {
            self._chann:connect(ipv4, port)
            return true
        } else {
            Log:error("failed to connect '%s:%d', %s", ipv4, port, self._chann)
            return false
        }
    }

    -- callback params should be (self, event_name, accept_chann, c_msg)
    fn setCallback(callback) {
        if not callback {
            Log:error("invalid callback param")
            return
        }
        self._callback = callback
        self._chann:setCallback({ chann, event_name, accept_chann, c_msg in
            switch event_name {
            case "event_connected":
                self._callback(self, event_name, accept_chann, c_msg)
            case "event_recv":
                self._callback(self, event_name, nil, c_msg)
            case "event_send":
                self._callback(self, event_name, nil, c_msg)
            case "event_disconnect":
                self._callback(self, event_name, nil, c_msg)
            case "event_timer":
                self._callback(self, event_name, nil, c_msg)
            case "event_accept":
                chann_raw = setmetatable({}, ChannRaw)
                chann_raw._chann = accept_chann
                self._callback(self, event_name, chann_raw, c_msg)
            }
        })
    }

    fn send(data) {
        if self._chann and self._chann:state() == "state_connected" {
            return self._chann:send(data)
        }
    }

    fn recv() {
        if self._chann and self._chann:state() == "state_connected" {
            return self._chann:recv()
        }
    }

    fn setEventTimer(timeout_second) {
        if self._chann {
            self._chann:activeEvent("event_timer", timeout_second * 1000000)
        }
    }

    fn onLoopEvent() {
        return false
    }
}

return ChannRaw
